# Generated by https://quicktype.io
#
# To change quicktype's target language, run command:
#
#   "Set quicktype target language"

from sqlalchemy import (
    Text,
    Column,
    DateTime,
    Integer,
    String,
    create_engine,
)
from sqlalchemy.ext.declarative import declarative_base

from datetime import datetime, date
from chessCrawl import format, check
import re

dicFieldType = {
    # "dhtml_xq_adddate": datetime,
    # "dhtml_xq_editdate": datetime,
    "dhtml_xq_date": datetime,
    "dhtml_xq_firstnum": int,
    "dhtml_xq_length": int,
}
dicFieldParseStr = {
    "dhtml_xq_movelist": "DhtmlXQ_movelist",
    "dhtml_xq_ver": "DhtmlXQ_ver",
    "dhtml_xq_init": "DhtmlXQ_init",
    "dhtml_xq_pver": "DhtmlXQ_pver",
    # 创建日期：2005-11-19 06:33:01
    "dhtml_xq_adddate": "DhtmlXQ_adddate",
    # 修改日期：2005-11-19 06:33:00
    "dhtml_xq_editdate": "DhtmlXQ_editdate",
    # 标题：
    "dhtml_xq_title": "DhtmlXQ_title",
    "dhtml_xq_binit": "DhtmlXQ_binit",
    # 起始步数
    "dhtml_xq_firstnum": "DhtmlXQ_firstnum",
    # 总步数
    "dhtml_xq_length": "DhtmlXQ_length",
    # 棋谱类型：实战全局/开局
    "dhtml_xq_type": "DhtmlXQ_type",
    # 对局种类：慢棋
    "dhtml_xq_gametype": "DhtmlXQ_gametype",
    "dhtml_xq_other": "DhtmlXQ_other",
    # 开局类型：C38 中炮过河车互进七兵对屏风马左马盘河
    "dhtml_xq_open": "DhtmlXQ_open",
    # 赛事类型：
    "dhtml_xq_class": "DhtmlXQ_class",
    # 赛事：1993年全国象棋团体赛
    "dhtml_xq_event": "DhtmlXQ_event",
    # 轮次：
    "dhtml_xq_group": "DhtmlXQ_group",
    # 组别：
    "dhtml_xq_round": "DhtmlXQ_round",
    # 台次：
    "dhtml_xq_table": "DhtmlXQ_table",
    # 日期：1993-04-30
    "dhtml_xq_date": "DhtmlXQ_date",
    # 地点：南京
    "dhtml_xq_place": "DhtmlXQ_place",
    # 时间规则：
    "dhtml_xq_timerule": "DhtmlXQ_timerule",
    # 红方：福建 王晓华
    "dhtml_xq_red": "DhtmlXQ_red",
    # 红队：福建
    "dhtml_xq_redteam": "DhtmlXQ_redteam",
    # 红方姓名：王晓华
    "dhtml_xq_redname": "DhtmlXQ_redname",
    # 红等级分：
    "dhtml_xq_redlevel": "DhtmlXQ_redlevel",
    "dhtml_xq_redeng": "DhtmlXQ_redeng",
    "dhtml_xq_redrating": "DhtmlXQ_redrating",
    # 黑方用时：
    "dhtml_xq_redtime": "DhtmlXQ_redtime",
    # 黑方：福建 王晓华
    "dhtml_xq_black": "DhtmlXQ_black",
    # 黑队：福建
    "dhtml_xq_blackteam": "DhtmlXQ_blackteam",
    # 黑方姓名：王晓华
    "dhtml_xq_blackname": "DhtmlXQ_blackname",
    # 红等级分：
    "dhtml_xq_blacklevel": "DhtmlXQ_blacklevel",
    "dhtml_xq_blackeng": "DhtmlXQ_blackeng",
    "dhtml_xq_blackrating": "DhtmlXQ_blackrating",
    # 黑方用时：
    "dhtml_xq_blacktime": "DhtmlXQ_blacktime",
    # 结果：红胜
    "dhtml_xq_result": "DhtmlXQ_result",
    # 结束方式：认负
    "dhtml_xq_endtype": "DhtmlXQ_endtype",
    # 结束方式：认负
    # "dhtml_xq_content":
    # ubbPlay = netTool.getXpathMany(html, '//text()')
}

engine = create_engine(
    "mysql+pymysql://root:63632630@127.0.0.1:3306/chess?charset=utf8",
    max_overflow=50,
    encoding="utf-8",
)

Base = declarative_base()


def getFiledValue(field, content):
    reStrTemp = r"\[%s\]([\s\S]*)\[/%s\]"
    reStr = reStrTemp % (field, field)
    fieldRets = re.findall(reStr, content, flags=re.S)
    if len(fieldRets) > 0:
        return fieldRets[0]
    else:
        return None


class Play(Base):
    __tablename__ = "play"
    idMysql = Column(Integer, primary_key=True, autoincrement=True)
    id = Column(Integer, nullable=False, unique=True)
    # 日期：1993-04-30
    dhtml_xq_date = Column(DateTime(), nullable=True)
    # 标题：
    dhtml_xq_title = Column(String(128), nullable=True)
    # 开局类型：C38 中炮过河车互进七兵对屏风马左马盘河
    dhtml_xq_open = Column(String(128), nullable=True)
    # 棋谱类型：实战全局/开局
    dhtml_xq_type = Column(String(128), nullable=True)
    # 赛事类型：
    dhtml_xq_class = Column(String(128), nullable=True)
    # 赛事：1993年全国象棋团体赛
    dhtml_xq_event = Column(String(128), nullable=True)
    # 时间规则：
    dhtml_xq_timerule = Column(String(128), nullable=True)
    # 对局种类：慢棋
    dhtml_xq_gametype = Column(String(128), nullable=True)
    # 结果：红胜
    dhtml_xq_result = Column(String(128), nullable=True)
    # 结束方式：认负
    dhtml_xq_endtype = Column(String(128), nullable=True)
    # 红方：福建 王晓华
    dhtml_xq_red = Column(String(128), nullable=True)
    # 红队：福建
    dhtml_xq_redteam = Column(String(128), nullable=True)
    # 红方姓名：王晓华
    dhtml_xq_redname = Column(String(128), nullable=True)
    # 黑方用时：
    dhtml_xq_redtime = Column(String(128), nullable=True)
    # 黑方：福建 王晓华
    dhtml_xq_black = Column(String(128), nullable=True)
    # 黑队：福建
    dhtml_xq_blackteam = Column(String(128), nullable=True)
    # 黑方姓名：王晓华
    dhtml_xq_blackname = Column(String(128), nullable=True)
    # 起始步数
    dhtml_xq_firstnum = Column(Integer, nullable=True)
    # 总步数
    dhtml_xq_length = Column(Integer, nullable=True)
    # 地点：南京
    dhtml_xq_place = Column(String(128), nullable=True)
    # 棋谱：
    dhtml_xq_movelist = Column(String(2048), nullable=True)
    dhtml_xq_content = Column(Text(256), nullable=True)
    # 创建日期：2005-11-19 06:33:01
    dhtml_xq_adddate = Column(DateTime(), nullable=True)
    # 修改日期：2005-11-19 06:33:00
    dhtml_xq_editdate = Column(DateTime(), nullable=True)
    # 红等级分：
    dhtml_xq_redlevel = Column(String(128), nullable=True)
    dhtml_xq_redeng = Column(String(128), nullable=True)
    dhtml_xq_redrating = Column(String(128), nullable=True)
    # 黑方等级分：
    dhtml_xq_blacklevel = Column(String(128), nullable=True)
    dhtml_xq_blackeng = Column(String(128), nullable=True)
    dhtml_xq_blackrating = Column(String(128), nullable=True)
    # 黑方用时：
    dhtml_xq_blacktime = Column(String(128), nullable=True)
    dhtml_xq_ver = Column(String(128), nullable=True)
    dhtml_xq_init = Column(String(128), nullable=True)
    dhtml_xq_pver = Column(Integer, nullable=True)
    dhtml_xq_binit = Column(String(128), nullable=True)
    dhtml_xq_other = Column(String(128), nullable=True)
    # 轮次：
    dhtml_xq_group = Column(String(128), nullable=True)
    # 组别：
    dhtml_xq_round = Column(String(128), nullable=True)
    # 台次：
    dhtml_xq_table = Column(String(128), nullable=True)

    def __init__(self, id, ubbStr):
        # super().__init__(ubbStr)
        self.id = id
        self.commentDic = {}
        self.movesDic = {}
        if ubbStr is None or ubbStr == "":
            return
        for field in dicFieldParseStr:
            fieldParseStr = dicFieldParseStr[field]
            value = getFiledValue(fieldParseStr, ubbStr)
            try:
                self.setAttr(field, value)
            except Exception as e:
                print("%d  attr %s 's value : %s is not valid" % (id, field, value))
                print(e)
        self.dhtml_xq_content = ubbStr

    def setAttr(self, name, value):
        if name not in dicFieldType:
            setattr(self, name, value)
        elif dicFieldType[name] is datetime:
            # fieldValue = datetime.strptime(value, "%Y-%m-%d %H:%M:%S")
            dateList = check.GetValidDateList(value)[:3]

            # dateList = check.GetValidDateList(value)[:3]
            if dateList:
                fieldValue = date(*dateList)
                setattr(self, name, fieldValue)
        elif dicFieldType[name] is int:
            setattr(self, name, int(value))

    def generateUbb(self):
        temp = "[DhtmlXQ]{content}\r\n[/DhtmlXQ]"
        tempLine = "\r\n[{field}]{value}[/{field}]"
        content = ""
        for field in dicFieldParseStr:
            fieldParseStr = dicFieldParseStr[field]
            value = getattr(self, field)
            dataLine = tempLine.format(field=fieldParseStr, value=value)
            content += dataLine
        comments = self.getUbbCommnetsUnit()
        content += comments
        moves = self.getUbbMovesUnit()
        content += moves
        ret = temp.format(content=content)
        return ret

    def addComment(self, pos, parent, comment):
        self.commentDic[(pos, parent)] = comment

    def getUbbCommnet(self, pos, parent):
        key = (pos, parent)
        comment = self.commentDic[key]
        return comment

    def getUbbCommnetsUnit(self):
        commentUbbLines = ""
        for key in self.commentDic:
            pos = key[0]
            parent = key[1]
            comment = self.commentDic[key]
            commentMark = None
            if parent == 0:
                commentMark = "DhtmlXQ_comment{pos}".format(pos=pos)
            else:
                commentMark = "DhtmlXQ_comment{pos}_{parent}".format(pos=pos, parent=parent)
            tempLine = "\r\n[{field}]{value}[/{field}]"
            commentUbbLine = tempLine.format(field=commentMark, value=comment)
            commentUbbLines += commentUbbLine
        return commentUbbLines

    def addMoves(self, pos, parent, moves):
        self.movesDic[(pos, parent)] = moves

    def getUbbMoves(self, pos, parent):
        key = (pos, parent)
        fenMoves = self.movesDic[key]
        fenMovesStr = "".join(fenMoves)
        ubbMove = format.toCodeMove(fenMovesStr)
        return ubbMove

    def getUbbMovesUnit(self):
        movesUbbLines = ""
        movesDupKeys = list(self.movesDic.keys())
        movesDupKeys.sort()
        for i in range(0, len(movesDupKeys)):
            key = movesDupKeys[i]
            pos = key[0]
            parent = key[1]
            ubbMoves = self.getUbbMoves(pos, parent)
            movesMark = "DhtmlXQ_move_{parent}_{pos}_{index}".format(parent=parent, pos=pos, index=i + 1)
            tempLine = "\r\n[{field}]{value}[/{field}]"
            movesUbbLine = tempLine.format(field=movesMark, value=ubbMoves)
            movesUbbLines += movesUbbLine
        return movesUbbLines

    # if __name__ == "__main__":
    #     Base.metadata.drop_all(engine)  # 删除表
    #     Base.metadata.create_all(engine)  # 创建表
